<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-03T18:47:26-08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">It’s Me</title><link href="http://localhost:4000/jekyll/new-cat/2019/10/welcome-to-jekyll.html" rel="alternate" type="text/html" title="It's Me" /><published>2019-10-19T09:59:18-07:00</published><updated>2019-10-19T09:59:18-07:00</updated><id>http://localhost:4000/jekyll/new-cat/2019/10/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/new-cat/2019/10/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">How This Works</title><link href="http://localhost:4000/2019/10/19/how-this-works.html" rel="alternate" type="text/html" title="How This Works" /><published>2019-10-19T00:00:00-07:00</published><updated>2019-10-19T00:00:00-07:00</updated><id>http://localhost:4000/2019/10/19/how-this-works</id><content type="html" xml:base="http://localhost:4000/2019/10/19/how-this-works.html">&lt;h1 id=&quot;most-websites&quot;&gt;Most websites&lt;/h1&gt;
&lt;p&gt;Request response cycle:&lt;/p&gt;

&lt;p&gt;1) HTTP request comes to the server from the web client.
2) Linux (OS) gives the request to nginx (networking layer - code that knows how to listen to HTTP requests and serve responses)
— after step 2 is where things start to slow down, slow site speeds –
3) Nginx passes that HTTP request to Django (the application code - turns the request into a response.)
4) Django asks the database for any information that it needs based on the parameters of the request.
5) Django takes that information combines it with HTML templates to produce the actual HTML.
6) Django passes the HTML back to nginx
7) nginx serves the response back to the web client.&lt;/p&gt;

&lt;p&gt;But what if the content is really simple?
Then comes static site generators&lt;/p&gt;

&lt;h1 id=&quot;what-happens-offline-jekyll&quot;&gt;What happens offline (Jekyll):&lt;/h1&gt;
&lt;p&gt;1) Jekyll then asks the database for all the answers (does the work upfront before any request comes in) example: your computer
2) Jekyll renders all the answers against appropriate templates (ex: blog posts)
3) Jekyll then saves the resulting HTML to actual files
4) Then the developer uploads those files to the server&lt;/p&gt;

&lt;h1 id=&quot;time-for-a-request-jekyll&quot;&gt;Time for a request (Jekyll)!&lt;/h1&gt;
&lt;p&gt;1) HTTP request comes to the server from the web client.
2) Linux (OS) gives the request to nginx (networking layer - code that knows how to listen to HTTP requests and serve responses)
3) Nginx simply returns the appropriate files
4) AND YOU’RE DONE! YOUR SITE IS FAST, MAN!&lt;/p&gt;

&lt;p&gt;What are the other benefits?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;It’s more secure (no one will hack it)&lt;/li&gt;
  &lt;li&gt;Less maintenance (ex: Python could run out of memory, why sites go down)&lt;/li&gt;
  &lt;li&gt;Lower cost (databases cost money and you can have a much simpler server - ex: $1 of server buys you a lot more capacity for traffic)&lt;/li&gt;
  &lt;li&gt;Blog aware (you can write your content in markdown)
** Barack Obama’s campaign website used Jekyll**&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Most websites Request response cycle:</summary></entry><entry><title type="html">New Blog</title><link href="http://localhost:4000/2019/10/19/new-blog.html" rel="alternate" type="text/html" title="New Blog" /><published>2019-10-19T00:00:00-07:00</published><updated>2019-10-19T00:00:00-07:00</updated><id>http://localhost:4000/2019/10/19/new-blog</id><content type="html" xml:base="http://localhost:4000/2019/10/19/new-blog.html">&lt;p&gt;Some content&lt;/p&gt;</content><author><name></name></author><summary type="html">Some content</summary></entry></feed>